@page "/chat"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable


<PageTitle>Chat</PageTitle>


<div class="form-group">
    <label>
        Your Username:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message all:
        <input @bind="messageInput" size="50" />
    </label>
</div>

<div class="form-group">
    <label>
        PrivateMessage, type username:
        <input @bind="privateMessageUser" size="50" />
    </label>
</div>

<button @onclick="() => string.IsNullOrEmpty(privateMessageUser) ? Send() : SendPrivate()" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;
    private string? privateMessageUser;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("UserLeft", (user, message) =>
       {
           var encodedMsg = $"User:{user} left the chat.";
           messages.Add(encodedMsg);
           InvokeAsync(StateHasChanged);
       });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            var result = await hubConnection.InvokeAsync<bool>("RegisterUser", userInput);

            if (result)
            {
                await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SendPrivate()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendPrivateMessage", privateMessageUser, userInput, messageInput);
            await InvokeAsync(StateHasChanged);
        }
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("OnDisconnectedAsync");
            await hubConnection.DisposeAsync();
        }
    }
}
